[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\hp\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\hp\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_77)
[debug]       Load.loadUnit: plugins took 279.0355ms
[debug]       Load.loadUnit: defsScala took 0.5081ms
[debug] [Loading] Scanning directory C:\Users\hp\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hp\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 22.3723 ms
[debug]           Load.resolveProject(global-plugins) took 47.933ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\hp\.sbt\1.0\plugins, plugins: List(<none>))) took 105.0586ms
[debug] [Loading] Done in C:\Users\hp\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 137.0216ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2537ms
[debug]     Load.loadUnit(file:/C:/Users/hp/.sbt/1.0/plugins/, ...) took 427.1188ms
[debug]   Load.apply: load took 577.7644ms
[debug]   Load.apply: resolveProjects took 4.9207ms
[debug]   Load.apply: finalTransforms took 51.45ms
[debug]   Load.apply: config.delegates took 6.0721ms
[debug]   Load.apply: Def.make(settings)... took 786.3348ms
[debug]   Load.apply: structureIndex took 109.177ms
[debug]   Load.apply: mkStreams took 1.5913ms
[info] loading global plugins from C:\Users\hp\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2967.1505ms
[debug]           Load.loadUnit: plugins took 23.92ms
[debug]           Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\hp\IdeaProjects\MapReduce_Customer_Segmentation\project
[debug]             Load.loadUnit: mkEval took 8.5479ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hp\IdeaProjects\MapReduce_Customer_Segmentation\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1656 ms
[info] loading settings for project mapreduce_customer_segmentation-build from idea.sbt ...
[debug]               Load.resolveProject(mapreduce_customer_segmentation-build) took 8.8904ms
[debug]             Load.loadTransitive: finalizeProject(Project(id mapreduce_customer_segmentation-build, base: C:\Users\hp\IdeaProjects\MapReduce_Customer_Segmentation\project, plugins: List(<none>))) took 10.4023ms
[debug] [Loading] Done in C:\Users\hp\IdeaProjects\MapReduce_Customer_Segmentation\project, returning: (mapreduce_customer_segmentation-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2119.5907ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.9286ms
[debug]         Load.loadUnit(file:/C:/Users/hp/IdeaProjects/MapReduce_Customer_Segmentation/project/, ...) took 2148.2677ms
[debug]       Load.apply: load took 2149.339ms
[debug]       Load.apply: resolveProjects took 0.0651ms
[debug]       Load.apply: finalTransforms took 10.4831ms
[debug]       Load.apply: config.delegates took 0.3691ms
[debug]       Load.apply: Def.make(settings)... took 76.306ms
[debug]       Load.apply: structureIndex took 28.8099ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\hp\IdeaProjects\MapReduce_Customer_Segmentation\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3461.9412ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\hp\IdeaProjects\MapReduce_Customer_Segmentation
[debug]       Load.loadUnit: mkEval took 0.2333ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hp\IdeaProjects\MapReduce_Customer_Segmentation, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.4218 ms
[info] loading settings for project mapreduce_customer_segmentation from build.sbt ...
[debug]         Load.resolveProject(mapreduce_customer_segmentation) took 27.2952ms
[debug]       Load.loadTransitive: finalizeProject(Project(id mapreduce_customer_segmentation, base: C:\Users\hp\IdeaProjects\MapReduce_Customer_Segmentation, plugins: List(<none>))) took 29.6619ms
[debug] [Loading] Done in C:\Users\hp\IdeaProjects\MapReduce_Customer_Segmentation, returning: (mapreduce_customer_segmentation)
[debug]     Load.loadUnit: loadedProjectsRaw took 1300.1437ms
[debug]     Load.loadUnit: cleanEvalClasses took 19.7156ms
[debug]   Load.loadUnit(file:/C:/Users/hp/IdeaProjects/MapReduce_Customer_Segmentation/, ...) took 4782.2792ms
[debug] Load.apply: load took 4784.2746ms
[debug] Load.apply: resolveProjects took 0.1035ms
[debug] Load.apply: finalTransforms took 26.0921ms
[debug] Load.apply: config.delegates took 0.3335ms
[debug] Load.apply: Def.make(settings)... took 62.4794ms
[debug] Load.apply: structureIndex took 51.2349ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to MapReduce_Customer_Segmentation (in build file:/C:/Users/hp/IdeaProjects/MapReduce_Customer_Segmentation/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58098 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58098, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to MapReduce_Customer_Segmentation (in build file:/C:/Users/hp/IdeaProjects/MapReduce_Customer_Segmentation/)
[debug] > Exec(idea-shell, None, None)
