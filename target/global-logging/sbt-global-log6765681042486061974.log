[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\hp\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\hp\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_77)
[debug]       Load.loadUnit: plugins took 690.7424ms
[debug]       Load.loadUnit: defsScala took 0.4938ms
[debug] [Loading] Scanning directory C:\Users\hp\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hp\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 38.3585 ms
[debug]           Load.resolveProject(global-plugins) took 142.9102ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\hp\.sbt\1.0\plugins, plugins: List(<none>))) took 241.9793ms
[debug] [Loading] Done in C:\Users\hp\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 356.7397ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4335ms
[debug]     Load.loadUnit(file:/C:/Users/hp/.sbt/1.0/plugins/, ...) took 1062.3576ms
[debug]   Load.apply: load took 1542.9187ms
[debug]   Load.apply: resolveProjects took 6.9133ms
[debug]   Load.apply: finalTransforms took 121.5279ms
[debug]   Load.apply: config.delegates took 10.7434ms
[debug]   Load.apply: Def.make(settings)... took 1211.3352ms
[debug]   Load.apply: structureIndex took 89.1723ms
[debug]   Load.apply: mkStreams took 1.6754ms
[info] loading global plugins from C:\Users\hp\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4739.5226ms
[debug]           Load.loadUnit: plugins took 23.6227ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\hp\Desktop\Uni\magistrale\Scalable_and_cloud_programming\Progetto\MapReduce_Customer_Segmentation\project
[debug]             Load.loadUnit: mkEval took 6.9921ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hp\Desktop\Uni\magistrale\Scalable_and_cloud_programming\Progetto\MapReduce_Customer_Segmentation\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2954 ms
[info] loading settings for project mapreduce_customer_segmentation-build from idea.sbt ...
[debug]               Load.resolveProject(mapreduce_customer_segmentation-build) took 2.3176ms
[debug]             Load.loadTransitive: finalizeProject(Project(id mapreduce_customer_segmentation-build, base: C:\Users\hp\Desktop\Uni\magistrale\Scalable_and_cloud_programming\Progetto\MapReduce_Customer_Segmentation\project, plugins: List(<none>))) took 3.9257ms
[debug] [Loading] Done in C:\Users\hp\Desktop\Uni\magistrale\Scalable_and_cloud_programming\Progetto\MapReduce_Customer_Segmentation\project, returning: (mapreduce_customer_segmentation-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 116.2259ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.0942ms
[debug]         Load.loadUnit(file:/C:/Users/hp/Desktop/Uni/magistrale/Scalable_and_cloud_programming/Progetto/MapReduce_Customer_Segmentation/project/, ...) took 145.0726ms
[debug]       Load.apply: load took 146.2141ms
[debug]       Load.apply: resolveProjects took 0.0564ms
[debug]       Load.apply: finalTransforms took 9.4175ms
[debug]       Load.apply: config.delegates took 0.3448ms
[debug]       Load.apply: Def.make(settings)... took 74.1883ms
[debug]       Load.apply: structureIndex took 32.7687ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\hp\Desktop\Uni\magistrale\Scalable_and_cloud_programming\Progetto\MapReduce_Customer_Segmentation\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1459.9386ms
[debug]     Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory C:\Users\hp\Desktop\Uni\magistrale\Scalable_and_cloud_programming\Progetto\MapReduce_Customer_Segmentation
[debug]       Load.loadUnit: mkEval took 0.2349ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hp\Desktop\Uni\magistrale\Scalable_and_cloud_programming\Progetto\MapReduce_Customer_Segmentation, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.2723 ms
[info] loading settings for project mapreduce_customer_segmentation from build.sbt ...
[debug]         Load.resolveProject(mapreduce_customer_segmentation) took 49.7313ms
[debug]       Load.loadTransitive: finalizeProject(Project(id mapreduce_customer_segmentation, base: C:\Users\hp\Desktop\Uni\magistrale\Scalable_and_cloud_programming\Progetto\MapReduce_Customer_Segmentation, plugins: List(<none>))) took 54.6952ms
[debug] [Loading] Done in C:\Users\hp\Desktop\Uni\magistrale\Scalable_and_cloud_programming\Progetto\MapReduce_Customer_Segmentation, returning: (mapreduce_customer_segmentation)
[debug]     Load.loadUnit: loadedProjectsRaw took 3375.7849ms
[debug]     Load.loadUnit: cleanEvalClasses took 37.181ms
[debug]   Load.loadUnit(file:/C:/Users/hp/Desktop/Uni/magistrale/Scalable_and_cloud_programming/Progetto/MapReduce_Customer_Segmentation/, ...) took 4873.6535ms
[debug] Load.apply: load took 4876.1123ms
[debug] Load.apply: resolveProjects took 0.148ms
[debug] Load.apply: finalTransforms took 36.0747ms
[debug] Load.apply: config.delegates took 0.7128ms
[debug] Load.apply: Def.make(settings)... took 102.8646ms
[debug] Load.apply: structureIndex took 35.0652ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to MapReduce_Customer_Segmentation (in build file:/C:/Users/hp/Desktop/Uni/magistrale/Scalable_and_cloud_programming/Progetto/MapReduce_Customer_Segmentation/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56217 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56217, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to MapReduce_Customer_Segmentation (in build file:/C:/Users/hp/Desktop/Uni/magistrale/Scalable_and_cloud_programming/Progetto/MapReduce_Customer_Segmentation/)
[debug] > Exec(idea-shell, None, None)
